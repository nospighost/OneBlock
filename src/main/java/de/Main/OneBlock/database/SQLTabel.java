package de.Main.OneBlock.database;import org.bukkit.entity.Player;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.HashMap;import java.util.Objects;import java.util.Set;import java.util.UUID;public class SQLTabel {    private final SQLConnection connection;    private final String name;    private final HashMap<String, SQLDataType> colums; //Spalten, Datentypen    public SQLTabel(SQLConnection connection, String name,HashMap<String, SQLDataType> colums) {        this.connection = connection;        this.name = name;        this.colums = colums;        createMoneyTable();    }    public Set<String> getName() {        return colums.keySet();    }    public SQLDataType getType(String columname) {        return colums.get(columname);    }    public void createMoneyTable() {        String sql = "CREATE TABLE IF NOT EXISTS " + name + "("; //erstellt eine neue Tabelle mit der uuid des users als Name, falls es sie noch nicht gibt        for (String colum : colums.keySet()) {            sql += colum + " " + colums.get(colum).toSQL() + ","; //wandelt es in SQL Sprache um        }        sql = sql.substring(0, sql.length() - 1); //letzes Komma löschen, um den Befehl zu beenden        sql += ");"; //^^        try {            Statement stateMent = this.connection.getConnection().createStatement();            stateMent.executeUpdate(sql);        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public static class Condition { //Zustand überprüfen ob es die Bedingung gibt        String value;        String columName;        public Condition(String columname, String value) {            this.value = value;            this.columName = columname;        }        public  String getColumname() {            return columName;        }        public String getValue() {            return value;        }    }//Zustand überprüfen, ob es die Bedingung gibt    public void set(String columName, Object objects, Condition condition) {        if(objects == null) {  //Gucken, ob es die Condition gibt            remove(condition);            return;        }        if(exits(condition)) {            try {                String sql = "update " + this.name + " set " + columName + "=? where " + condition.columName + "=?";                PreparedStatement ps = connection.getConnection().prepareStatement(sql);                ps.setObject(1, objects);                ps.setString(2, condition.value);                ps.executeUpdate();            } catch (SQLException e) {                throw new RuntimeException(e);            }        } else {            try {                String sql = "insert into " + this.name + " ("  + columName + ") values (?)";                PreparedStatement ps = connection.getConnection().prepareStatement(sql);                ps.setObject(1, objects);                ps.executeUpdate();            } catch (SQLException e) {                throw new RuntimeException(e);            }        }    }    public void remove(Condition condition) { //von dem Table removen        try {            String sql = "delete from " + this.name + " where " + condition.columName + "=?";            PreparedStatement ps = connection.getConnection().prepareStatement(sql); //Deleten            ps.setString(1, condition.value);//deleten        } catch (SQLException e) {            throw new RuntimeException(e); //FEHLER!        }    }    private PreparedStatement select(String columName, Condition condition) {        try {            String sql = "select " + columName + " from " + this.name + " where " + condition.columName + "=?";            PreparedStatement ps = connection.getConnection().prepareStatement(sql);            ps.setString(1, condition.value);            ResultSet rs = ps.executeQuery();            if (rs.next()) {                return ps;            }            return null;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public String getString(String columName, Condition condition) {        try {            ResultSet rs = select(columName, condition).executeQuery();            if (rs.next()) {                return rs.getString(columName);            }            return null;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public int getInt(String columName, Condition condition) {        try {            ResultSet rs = select(columName, condition).executeQuery();            if (rs.next()) {                return rs.getInt(columName);            }            return 0;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public boolean getBoolean(String columName, Condition condition) {        try {            ResultSet rs = select(columName, condition).executeQuery();            if (rs.next()) {                return rs.getBoolean(columName);            }            return false;        } catch (SQLException e) {            throw new RuntimeException(e);        }    }    public boolean exits(Condition condition) { //existiert die Bedingung?        try {            String sql = "select " + condition.columName + " from " + this.name + " where " + condition.columName + "=?";            PreparedStatement ps = connection.getConnection().prepareStatement(sql); //Condition aus der Datenbank Holen            ps.setString(1, condition.value);            ResultSet rs = ps.executeQuery();            return rs.next();        } catch (SQLException e) {            throw new RuntimeException(e); //FEHLER!        }    }}